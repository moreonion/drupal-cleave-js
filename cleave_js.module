<?php

/**
 * @file
 * Hook implementations for the cleave_js module.
 */

use Drupal\little_helpers\ElementTree;

/**
 * Implements hook_libraries_info().
 */
function cleave_js_libraries_info() {
  $libraries['cleave.js'] = [
    'name' => 'cleave.js',
    'vendor url' => 'https://nosir.github.io/cleave.js/',
    'download url' => 'https://github.com/nosir/cleave.js/releases',
    'version arguments' => [
      'file' => 'package.json',
      'pattern' => '"(\d+\.\d+\.\d+)"',
      'lines' => 20,
    ],
    'files' => [
      'js' => [
        'dist/cleave.js' => ['group' => JS_LIBRARY],
      ],
    ],
  ];
  return $libraries;
}

/**
 * Implements hook_form_alter().
 *
 * Process #cleave element properties and turn them into data attributes.
 *
 * This could also be achieved by using $element['#process'] or
 * $element['#after_build'], but callbacks for these can only be added per
 * element type. This would mean implementing hook_element_info_alter() and
 * adding the callback to all / some (which?) types.
 */
function cleave_js_form_alter(&$form, &$form_state, $form_id) {
  $found = FALSE;
  ElementTree::applyRecursively($form, function (&$element, $key, &$parent) use (&$found) {
    if (!empty($element['#cleave'])) {
      $element['#attributes']['data-cleave-config'] = drupal_json_encode($element['#cleave']);
      $found = TRUE;
    }
  });
  if ($found) {
    $path = drupal_get_path('module', 'cleave_js');
    $form['#attached']['libraries_load']['cleave.js'] = ['cleave.js'];
    $form['#attached']['js'][$path . '/cleave_js.js'] = ['type' => 'file'];
  }
}
